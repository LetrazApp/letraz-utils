// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/letraz/v1/callback.proto

package letrazv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScrapeJobCallbackController_ScrapeJobCallBack_FullMethodName = "/letraz_server.JOB.ScrapeJobCallbackController/ScrapeJobCallBack"
)

// ScrapeJobCallbackControllerClient is the client API for ScrapeJobCallbackController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScrapeJobCallbackControllerClient interface {
	ScrapeJobCallBack(ctx context.Context, in *ScrapeJobCallbackRequest, opts ...grpc.CallOption) (*ScrapeJobCallbackResponse, error)
}

type scrapeJobCallbackControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewScrapeJobCallbackControllerClient(cc grpc.ClientConnInterface) ScrapeJobCallbackControllerClient {
	return &scrapeJobCallbackControllerClient{cc}
}

func (c *scrapeJobCallbackControllerClient) ScrapeJobCallBack(ctx context.Context, in *ScrapeJobCallbackRequest, opts ...grpc.CallOption) (*ScrapeJobCallbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScrapeJobCallbackResponse)
	err := c.cc.Invoke(ctx, ScrapeJobCallbackController_ScrapeJobCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScrapeJobCallbackControllerServer is the server API for ScrapeJobCallbackController service.
// All implementations must embed UnimplementedScrapeJobCallbackControllerServer
// for forward compatibility.
type ScrapeJobCallbackControllerServer interface {
	ScrapeJobCallBack(context.Context, *ScrapeJobCallbackRequest) (*ScrapeJobCallbackResponse, error)
	mustEmbedUnimplementedScrapeJobCallbackControllerServer()
}

// UnimplementedScrapeJobCallbackControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScrapeJobCallbackControllerServer struct{}

func (UnimplementedScrapeJobCallbackControllerServer) ScrapeJobCallBack(context.Context, *ScrapeJobCallbackRequest) (*ScrapeJobCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScrapeJobCallBack not implemented")
}
func (UnimplementedScrapeJobCallbackControllerServer) mustEmbedUnimplementedScrapeJobCallbackControllerServer() {
}
func (UnimplementedScrapeJobCallbackControllerServer) testEmbeddedByValue() {}

// UnsafeScrapeJobCallbackControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScrapeJobCallbackControllerServer will
// result in compilation errors.
type UnsafeScrapeJobCallbackControllerServer interface {
	mustEmbedUnimplementedScrapeJobCallbackControllerServer()
}

func RegisterScrapeJobCallbackControllerServer(s grpc.ServiceRegistrar, srv ScrapeJobCallbackControllerServer) {
	// If the following call pancis, it indicates UnimplementedScrapeJobCallbackControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScrapeJobCallbackController_ServiceDesc, srv)
}

func _ScrapeJobCallbackController_ScrapeJobCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrapeJobCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapeJobCallbackControllerServer).ScrapeJobCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScrapeJobCallbackController_ScrapeJobCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapeJobCallbackControllerServer).ScrapeJobCallBack(ctx, req.(*ScrapeJobCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScrapeJobCallbackController_ServiceDesc is the grpc.ServiceDesc for ScrapeJobCallbackController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScrapeJobCallbackController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "letraz_server.JOB.ScrapeJobCallbackController",
	HandlerType: (*ScrapeJobCallbackControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScrapeJobCallBack",
			Handler:    _ScrapeJobCallbackController_ScrapeJobCallBack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/letraz/v1/callback.proto",
}
