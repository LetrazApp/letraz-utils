// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/letraz/v1/letraz-utils.proto

package letrazv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScraperService_ScrapeJob_FullMethodName = "/letraz.v1.ScraperService/ScrapeJob"
)

// ScraperServiceClient is the client API for ScraperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScraperServiceClient interface {
	// Scrape a job posting from a URL
	ScrapeJob(ctx context.Context, in *ScrapeJobRequest, opts ...grpc.CallOption) (*ScrapeJobResponse, error)
}

type scraperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScraperServiceClient(cc grpc.ClientConnInterface) ScraperServiceClient {
	return &scraperServiceClient{cc}
}

func (c *scraperServiceClient) ScrapeJob(ctx context.Context, in *ScrapeJobRequest, opts ...grpc.CallOption) (*ScrapeJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScrapeJobResponse)
	err := c.cc.Invoke(ctx, ScraperService_ScrapeJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScraperServiceServer is the server API for ScraperService service.
// All implementations must embed UnimplementedScraperServiceServer
// for forward compatibility.
type ScraperServiceServer interface {
	// Scrape a job posting from a URL
	ScrapeJob(context.Context, *ScrapeJobRequest) (*ScrapeJobResponse, error)
	mustEmbedUnimplementedScraperServiceServer()
}

// UnimplementedScraperServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScraperServiceServer struct{}

func (UnimplementedScraperServiceServer) ScrapeJob(context.Context, *ScrapeJobRequest) (*ScrapeJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScrapeJob not implemented")
}
func (UnimplementedScraperServiceServer) mustEmbedUnimplementedScraperServiceServer() {}
func (UnimplementedScraperServiceServer) testEmbeddedByValue()                        {}

// UnsafeScraperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScraperServiceServer will
// result in compilation errors.
type UnsafeScraperServiceServer interface {
	mustEmbedUnimplementedScraperServiceServer()
}

func RegisterScraperServiceServer(s grpc.ServiceRegistrar, srv ScraperServiceServer) {
	// If the following call pancis, it indicates UnimplementedScraperServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScraperService_ServiceDesc, srv)
}

func _ScraperService_ScrapeJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrapeJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServiceServer).ScrapeJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScraperService_ScrapeJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServiceServer).ScrapeJob(ctx, req.(*ScrapeJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScraperService_ServiceDesc is the grpc.ServiceDesc for ScraperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScraperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "letraz.v1.ScraperService",
	HandlerType: (*ScraperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScrapeJob",
			Handler:    _ScraperService_ScrapeJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/letraz/v1/letraz-utils.proto",
}

const (
	ResumeService_TailorResume_FullMethodName       = "/letraz.v1.ResumeService/TailorResume"
	ResumeService_GenerateScreenshot_FullMethodName = "/letraz.v1.ResumeService/GenerateScreenshot"
	ResumeService_ExportResume_FullMethodName       = "/letraz.v1.ResumeService/ExportResume"
)

// ResumeServiceClient is the client API for ResumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResumeServiceClient interface {
	// Tailor a resume for a specific job posting
	TailorResume(ctx context.Context, in *TailorResumeRequest, opts ...grpc.CallOption) (*TailorResumeResponse, error)
	// Generate a screenshot of a resume
	GenerateScreenshot(ctx context.Context, in *ResumeScreenshotRequest, opts ...grpc.CallOption) (*ResumeScreenshotResponse, error)
	// Export a resume to LaTeX and upload to object storage
	ExportResume(ctx context.Context, in *ExportResumeRequest, opts ...grpc.CallOption) (*ExportResumeResponse, error)
}

type resumeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResumeServiceClient(cc grpc.ClientConnInterface) ResumeServiceClient {
	return &resumeServiceClient{cc}
}

func (c *resumeServiceClient) TailorResume(ctx context.Context, in *TailorResumeRequest, opts ...grpc.CallOption) (*TailorResumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TailorResumeResponse)
	err := c.cc.Invoke(ctx, ResumeService_TailorResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeServiceClient) GenerateScreenshot(ctx context.Context, in *ResumeScreenshotRequest, opts ...grpc.CallOption) (*ResumeScreenshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResumeScreenshotResponse)
	err := c.cc.Invoke(ctx, ResumeService_GenerateScreenshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeServiceClient) ExportResume(ctx context.Context, in *ExportResumeRequest, opts ...grpc.CallOption) (*ExportResumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportResumeResponse)
	err := c.cc.Invoke(ctx, ResumeService_ExportResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResumeServiceServer is the server API for ResumeService service.
// All implementations must embed UnimplementedResumeServiceServer
// for forward compatibility.
type ResumeServiceServer interface {
	// Tailor a resume for a specific job posting
	TailorResume(context.Context, *TailorResumeRequest) (*TailorResumeResponse, error)
	// Generate a screenshot of a resume
	GenerateScreenshot(context.Context, *ResumeScreenshotRequest) (*ResumeScreenshotResponse, error)
	// Export a resume to LaTeX and upload to object storage
	ExportResume(context.Context, *ExportResumeRequest) (*ExportResumeResponse, error)
	mustEmbedUnimplementedResumeServiceServer()
}

// UnimplementedResumeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResumeServiceServer struct{}

func (UnimplementedResumeServiceServer) TailorResume(context.Context, *TailorResumeRequest) (*TailorResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TailorResume not implemented")
}
func (UnimplementedResumeServiceServer) GenerateScreenshot(context.Context, *ResumeScreenshotRequest) (*ResumeScreenshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateScreenshot not implemented")
}
func (UnimplementedResumeServiceServer) ExportResume(context.Context, *ExportResumeRequest) (*ExportResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportResume not implemented")
}
func (UnimplementedResumeServiceServer) mustEmbedUnimplementedResumeServiceServer() {}
func (UnimplementedResumeServiceServer) testEmbeddedByValue()                       {}

// UnsafeResumeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResumeServiceServer will
// result in compilation errors.
type UnsafeResumeServiceServer interface {
	mustEmbedUnimplementedResumeServiceServer()
}

func RegisterResumeServiceServer(s grpc.ServiceRegistrar, srv ResumeServiceServer) {
	// If the following call pancis, it indicates UnimplementedResumeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResumeService_ServiceDesc, srv)
}

func _ResumeService_TailorResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TailorResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).TailorResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_TailorResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).TailorResume(ctx, req.(*TailorResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeService_GenerateScreenshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeScreenshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).GenerateScreenshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_GenerateScreenshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).GenerateScreenshot(ctx, req.(*ResumeScreenshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeService_ExportResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).ExportResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_ExportResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).ExportResume(ctx, req.(*ExportResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResumeService_ServiceDesc is the grpc.ServiceDesc for ResumeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResumeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "letraz.v1.ResumeService",
	HandlerType: (*ResumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TailorResume",
			Handler:    _ResumeService_TailorResume_Handler,
		},
		{
			MethodName: "GenerateScreenshot",
			Handler:    _ResumeService_GenerateScreenshot_Handler,
		},
		{
			MethodName: "ExportResume",
			Handler:    _ResumeService_ExportResume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/letraz/v1/letraz-utils.proto",
}

const (
	HealthService_HealthCheck_FullMethodName = "/letraz.v1.HealthService/HealthCheck"
)

// HealthServiceClient is the client API for HealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthServiceClient interface {
	// Health check endpoint
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type healthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthServiceClient(cc grpc.ClientConnInterface) HealthServiceClient {
	return &healthServiceClient{cc}
}

func (c *healthServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, HealthService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServiceServer is the server API for HealthService service.
// All implementations must embed UnimplementedHealthServiceServer
// for forward compatibility.
type HealthServiceServer interface {
	// Health check endpoint
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedHealthServiceServer()
}

// UnimplementedHealthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthServiceServer struct{}

func (UnimplementedHealthServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedHealthServiceServer) mustEmbedUnimplementedHealthServiceServer() {}
func (UnimplementedHealthServiceServer) testEmbeddedByValue()                       {}

// UnsafeHealthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServiceServer will
// result in compilation errors.
type UnsafeHealthServiceServer interface {
	mustEmbedUnimplementedHealthServiceServer()
}

func RegisterHealthServiceServer(s grpc.ServiceRegistrar, srv HealthServiceServer) {
	// If the following call pancis, it indicates UnimplementedHealthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HealthService_ServiceDesc, srv)
}

func _HealthService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthService_ServiceDesc is the grpc.ServiceDesc for HealthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "letraz.v1.HealthService",
	HandlerType: (*HealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _HealthService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/letraz/v1/letraz-utils.proto",
}
