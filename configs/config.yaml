server:
  port: 8080
  host: "0.0.0.0"
  read_timeout: "30s"
  write_timeout: "60s"  # Increased for AI processing responses
  idle_timeout: "60s"

workers:
  pool_size: 10
  queue_size: 100
  rate_limit: 60  # requests per minute
  timeout: "30s"
  max_retries: 3

background_tasks:
  max_concurrent_tasks: 20  # Reduced from 50 to prevent resource exhaustion
  task_timeout: "180s"      # Reduced from 300s with better timeouts in place
  cleanup_interval: "30m"   # More frequent cleanup
  max_task_age: "12h"       # Reduced to clean up old tasks faster

llm:
  provider: "claude"
  api_key: ""  # Set via environment variable LLM_API_KEY
  max_tokens: 8192
  temperature: 0.1
  timeout: "60s"

scraper:
  user_agent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
  proxies: []
  max_retries: 3
  request_timeout: "30s"
  headless_mode: true
  stealth_mode: true
  captcha:
    provider: "2captcha"
    api_key: ""  # Set via environment variable CAPTCHA_API_KEY
    timeout: "30s"
    enable_auto_solve: true

# Browser pool configuration for screenshot generation
browser_pool:
  max_instances: 5          # Maximum number of browser instances (auto-calculated if not set)
  max_idle_time: "5m"       # How long to keep idle browsers before closing
  acquisition_timeout: "30s" # Timeout for acquiring a browser instance
  cleanup_interval: "1m"    # How often to run cleanup routine
  max_browsers: 5           # Maximum number of browsers to create
  min_browsers: 2           # Minimum number of browsers for redundancy

firecrawl:
  api_key: ""  # Set via environment variable FIRECRAWL_API_KEY
  api_url: "https://api.firecrawl.dev"
  version: "v1"
  timeout: "60s"
  max_retries: 3
  formats: ["markdown"]  # Default formats: markdown, html, rawHtml, links, screenshot

brightdata:
  api_key: "${BRIGHTDATA_TOKEN}"  # Set via environment variable BRIGHTDATA_TOKEN
  base_url: "https://api.brightdata.com"
  dataset_id: "gd_lpfll7v5hcqtkxl6l"  # LinkedIn job scraping dataset
  timeout: "60s"
  max_retries: 3

logging:
  level: "info"
  format: "json"
  output: "stdout"

  # New adapter-based logging configuration
  adapters:
    # Console output for immediate feedback
    - name: "console"
      type: "stdout"
      enabled: true
      options:
        format: "json"
        colorized: false

    # Application log file
    - name: "app_log"
      type: "file"
      enabled: true
      options:
        file_path: "./logs/app.log"
        format: "json"
        max_size: 104857600  # 100MB
        max_backups: 5
        compress: true
        create_dirs: true
        sync_on_write: false
        rotation_policy: "size"

    # Betterstack telemetry logging
    - name: "betterstack"
      type: "betterstack"
      enabled: true
      options:
        source_token: "${BETTERSTACK_SOURCE_TOKEN}"
        endpoint: "${BETTERSTACK_ENDPOINT}"
        batch_size: 100
        flush_interval: "5s"
        max_retries: 3
        timeout: "30s"
        user_agent: "letraz-utils/1.0"
        headers:
          Content-Type: "application/json"

# DigitalOcean Spaces configuration for storing resume screenshots
digitalocean:
  spaces:
    bucket_url: ""  # Set via environment variable BUCKET_URL
    cdn_endpoint: ""  # Set via environment variable BUCKET_CDN_ENDPOINT
    access_key_id: ""  # Set via environment variable BUCKET_ACCESS_KEY_ID
    access_key_secret: ""  # Set via environment variable BUCKET_ACCESS_KEY_SECRET
    region: "blr1"  # Default region
    bucket_name: "letraz-all-purpose"  # Default bucket name

# Resume client configuration for screenshot generation
resume:
  client:
    base_url: "http://localhost:3000"  # Default letraz-client URL (deprecated, use preview_url)
    preview_url: "http://localhost:3000/admin/resumes"  # Full URL for resume preview endpoint
    preview_token: ""  # Set via environment variable RESUME_PREVIEW_TOKEN

# Callback configuration for gRPC callbacks when tasks complete
callback:
  server_address: ""  # Set via environment variable CALLBACK_SERVER_ADDRESS (e.g., "localhost:9090")
  timeout: "30s"
  max_retries: 3
  enabled: true  # Set via environment variable CALLBACK_ENABLED
